2023/05/09 11:49:22 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.16 (main, Mar  8 2023, 10:39:24) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    numpy_random_seed: 463210933
    GPU 0: NVIDIA GeForce RTX 3050 Laptop GPU
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.29.30143 for x64
    GCC: n/a
    PyTorch: 2.0.0+cu117
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 193431937
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.1+cu117
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/05/09 11:49:22 - mmengine - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='SwinTransformerV2',
        arch='tiny',
        img_size=256,
        drop_path_rate=0.2),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=7,
        in_channels=768,
        init_cfg=None,
        loss=dict(
            type='LabelSmoothLoss', label_smooth_val=0.1, mode='original'),
        cal_acc=False),
    init_cfg=[
        dict(type='TruncNormal', layer='Linear', std=0.02, bias=0.0),
        dict(type='Constant', layer='LayerNorm', val=1.0, bias=0.0)
    ],
    train_cfg=dict(augments=[
        dict(type='Mixup', alpha=0.8),
        dict(type='CutMix', alpha=1.0)
    ]))
dataset_type = 'CustomDataset'
data_preprocessor = dict(
    num_classes=7,
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    to_rgb=True)
bgr_mean = [103.53, 116.28, 123.675]
bgr_std = [57.375, 57.12, 58.395]
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='RandomResizedCrop',
        scale=256,
        backend='pillow',
        interpolation='bicubic'),
    dict(type='RandomFlip', prob=0.5, direction='horizontal'),
    dict(
        type='RandAugment',
        policies='timm_increasing',
        num_policies=2,
        total_level=10,
        magnitude_level=9,
        magnitude_std=0.5,
        hparams=dict(pad_val=[104, 116, 124], interpolation='bicubic')),
    dict(
        type='RandomErasing',
        erase_prob=0.25,
        mode='rand',
        min_area_ratio=0.02,
        max_area_ratio=0.3333333333333333,
        fill_color=[103.53, 116.28, 123.675],
        fill_std=[57.375, 57.12, 58.395]),
    dict(type='PackInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='ResizeEdge',
        scale=292,
        edge='short',
        backend='pillow',
        interpolation='bicubic'),
    dict(type='CenterCrop', crop_size=256),
    dict(type='PackInputs')
]
train_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=10,
    num_workers=5,
    dataset=dict(
        type='CustomDataset',
        data_root='Data/ISIC_dataset',
        ann_file='train_ann.txt',
        data_prefix='Train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='RandomResizedCrop',
                scale=256,
                backend='pillow',
                interpolation='bicubic'),
            dict(type='RandomFlip', prob=0.5, direction='horizontal'),
            dict(
                type='RandAugment',
                policies='timm_increasing',
                num_policies=2,
                total_level=10,
                magnitude_level=9,
                magnitude_std=0.5,
                hparams=dict(pad_val=[104, 116, 124],
                             interpolation='bicubic')),
            dict(
                type='RandomErasing',
                erase_prob=0.25,
                mode='rand',
                min_area_ratio=0.02,
                max_area_ratio=0.3333333333333333,
                fill_color=[103.53, 116.28, 123.675],
                fill_std=[57.375, 57.12, 58.395]),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=True))
val_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=10,
    num_workers=5,
    dataset=dict(
        type='CustomDataset',
        data_root='Data/ISIC_dataset',
        ann_file='valid_ann.txt',
        data_prefix='Valid',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='ResizeEdge',
                scale=292,
                edge='short',
                backend='pillow',
                interpolation='bicubic'),
            dict(type='CenterCrop', crop_size=256),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
val_evaluator = dict(type='Accuracy', topk=(1, ))
test_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=10,
    num_workers=5,
    dataset=dict(
        type='CustomDataset',
        data_root='Data/ISIC_dataset',
        ann_file='test_ann.txt',
        data_prefix='Test',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='ResizeEdge',
                scale=292,
                edge='short',
                backend='pillow',
                interpolation='bicubic'),
            dict(type='CenterCrop', crop_size=256),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
test_evaluator = dict(type='Accuracy', topk=(1, ))
optim_wrapper = dict(
    optimizer=dict(
        type='AdamW',
        lr=0.001,
        weight_decay=0.05,
        eps=1e-08,
        betas=(0.9, 0.999)),
    paramwise_cfg=dict(
        norm_decay_mult=0.0,
        bias_decay_mult=0.0,
        flat_decay_mult=0.0,
        custom_keys=dict({
            '.absolute_pos_embed': dict(decay_mult=0.0),
            '.relative_position_bias_table': dict(decay_mult=0.0)
        })))
param_scheduler = [
    dict(
        type='LinearLR',
        start_factor=0.001,
        by_epoch=True,
        end=5,
        convert_to_iter_based=True),
    dict(type='CosineAnnealingLR', eta_min=1e-05, by_epoch=True, begin=1)
]
train_cfg = dict(by_epoch=True, max_epochs=5, val_interval=1)
val_cfg = dict()
test_cfg = dict()
auto_scale_lr = dict(base_batch_size=1024)
default_scope = 'mmpretrain'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='VisualizationHook', enable=False))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[dict(type='LocalVisBackend')])
log_level = 'INFO'
load_from = 'checkpoint\\swinv2-tiny-w8_3rdparty_in1k-256px_20220803-e318968f.pth'
resume = False
randomness = dict(seed=None, deterministic=False)
launcher = 'none'
work_dir = 'work_dirs/swinv2_tiny_ISICdataset/train'

2023/05/09 11:49:22 - mmengine - INFO - Because batch augmentations are enabled, the data preprocessor automatically enables the `to_onehot` option to generate one-hot format labels.
2023/05/09 11:49:23 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/05/09 11:49:23 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.patch_embed.projection.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.patch_embed.norm.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.0.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.0.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.0.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.0.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.0.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.0.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.0.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.0.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.0.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.0.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.1.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.1.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.1.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.1.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.1.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.1.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.1.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.1.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.1.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.0.blocks.1.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.downsample.norm.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.downsample.norm.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.0.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.0.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.0.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.0.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.0.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.0.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.0.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.0.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.0.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.0.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.1.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.1.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.1.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.1.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.1.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.1.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.1.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.1.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.1.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.1.blocks.1.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.downsample.norm.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.downsample.norm.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.0.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.0.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.0.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.0.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.0.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.0.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.0.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.0.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.0.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.0.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.1.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.1.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.1.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.1.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.1.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.1.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.1.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.1.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.1.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.1.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.2.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.2.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.2.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.2.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.2.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.2.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.2.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.2.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.2.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.2.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.3.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.3.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.3.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.3.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.3.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.3.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.3.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.3.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.3.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.3.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.4.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.4.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.4.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.4.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.4.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.4.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.4.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.4.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.4.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.4.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.5.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.5.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.5.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.5.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.5.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.5.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.5.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.5.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.5.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.2.blocks.5.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.downsample.norm.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.downsample.norm.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.0.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.0.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.0.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.0.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.0.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.0.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.0.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.0.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.0.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.0.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.1.attn.w_msa.q_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.1.attn.w_msa.v_bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.1.attn.w_msa.cpb_mlp.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.1.attn.w_msa.proj.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.1.norm1.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.1.norm1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.1.ffn.layers.0.0.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.1.ffn.layers.1.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.1.norm2.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.stages.3.blocks.1.norm2.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.norm3.weight:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- backbone.norm3.bias:weight_decay=0.0
2023/05/09 11:49:23 - mmengine - INFO - paramwise_options -- head.fc.bias:weight_decay=0.0
Name of parameter - Initialization information

backbone.patch_embed.projection.weight - torch.Size([96, 3, 4, 4]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.patch_embed.projection.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.patch_embed.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.patch_embed.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.attn.w_msa.logit_scale - torch.Size([3, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.attn.w_msa.q_bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.attn.w_msa.v_bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.attn.w_msa.cpb_mlp.2.weight - torch.Size([3, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.attn.w_msa.qkv.weight - torch.Size([288, 96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.attn.w_msa.proj.weight - torch.Size([96, 96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.attn.w_msa.proj.bias - torch.Size([96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.norm1.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.norm1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.ffn.layers.0.0.weight - torch.Size([384, 96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.ffn.layers.0.0.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.ffn.layers.1.weight - torch.Size([96, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.ffn.layers.1.bias - torch.Size([96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.norm2.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.norm2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.attn.w_msa.logit_scale - torch.Size([3, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.attn.w_msa.q_bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.attn.w_msa.v_bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.attn.w_msa.cpb_mlp.2.weight - torch.Size([3, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.attn.w_msa.qkv.weight - torch.Size([288, 96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.attn.w_msa.proj.weight - torch.Size([96, 96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.attn.w_msa.proj.bias - torch.Size([96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.norm1.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.norm1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.ffn.layers.0.0.weight - torch.Size([384, 96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.ffn.layers.0.0.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.ffn.layers.1.weight - torch.Size([96, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.ffn.layers.1.bias - torch.Size([96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.norm2.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.norm2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.downsample.reduction.weight - torch.Size([192, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.downsample.norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.downsample.norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.attn.w_msa.logit_scale - torch.Size([6, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.attn.w_msa.q_bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.attn.w_msa.v_bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.attn.w_msa.cpb_mlp.2.weight - torch.Size([6, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.attn.w_msa.qkv.weight - torch.Size([576, 192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.attn.w_msa.proj.weight - torch.Size([192, 192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.attn.w_msa.proj.bias - torch.Size([192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.ffn.layers.0.0.weight - torch.Size([768, 192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.ffn.layers.0.0.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.ffn.layers.1.weight - torch.Size([192, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.ffn.layers.1.bias - torch.Size([192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.norm2.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.norm2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.attn.w_msa.logit_scale - torch.Size([6, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.attn.w_msa.q_bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.attn.w_msa.v_bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.attn.w_msa.cpb_mlp.2.weight - torch.Size([6, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.attn.w_msa.qkv.weight - torch.Size([576, 192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.attn.w_msa.proj.weight - torch.Size([192, 192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.attn.w_msa.proj.bias - torch.Size([192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.ffn.layers.0.0.weight - torch.Size([768, 192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.ffn.layers.0.0.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.ffn.layers.1.weight - torch.Size([192, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.ffn.layers.1.bias - torch.Size([192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.norm2.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.norm2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.downsample.reduction.weight - torch.Size([384, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.downsample.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.downsample.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.attn.w_msa.logit_scale - torch.Size([12, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.attn.w_msa.q_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.attn.w_msa.v_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.attn.w_msa.cpb_mlp.2.weight - torch.Size([12, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.attn.w_msa.proj.weight - torch.Size([384, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.attn.w_msa.proj.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.ffn.layers.0.0.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.ffn.layers.1.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.ffn.layers.1.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.attn.w_msa.logit_scale - torch.Size([12, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.attn.w_msa.q_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.attn.w_msa.v_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.attn.w_msa.cpb_mlp.2.weight - torch.Size([12, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.attn.w_msa.proj.weight - torch.Size([384, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.attn.w_msa.proj.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.ffn.layers.0.0.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.ffn.layers.1.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.ffn.layers.1.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.attn.w_msa.logit_scale - torch.Size([12, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.attn.w_msa.q_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.attn.w_msa.v_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.attn.w_msa.cpb_mlp.2.weight - torch.Size([12, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.attn.w_msa.proj.weight - torch.Size([384, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.attn.w_msa.proj.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.ffn.layers.0.0.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.ffn.layers.1.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.ffn.layers.1.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.attn.w_msa.logit_scale - torch.Size([12, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.attn.w_msa.q_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.attn.w_msa.v_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.attn.w_msa.cpb_mlp.2.weight - torch.Size([12, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.attn.w_msa.proj.weight - torch.Size([384, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.attn.w_msa.proj.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.ffn.layers.0.0.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.ffn.layers.1.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.ffn.layers.1.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.attn.w_msa.logit_scale - torch.Size([12, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.attn.w_msa.q_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.attn.w_msa.v_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.attn.w_msa.cpb_mlp.2.weight - torch.Size([12, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.attn.w_msa.proj.weight - torch.Size([384, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.attn.w_msa.proj.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.ffn.layers.0.0.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.ffn.layers.1.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.ffn.layers.1.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.attn.w_msa.logit_scale - torch.Size([12, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.attn.w_msa.q_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.attn.w_msa.v_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.attn.w_msa.cpb_mlp.2.weight - torch.Size([12, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.attn.w_msa.qkv.weight - torch.Size([1152, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.attn.w_msa.proj.weight - torch.Size([384, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.attn.w_msa.proj.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.ffn.layers.0.0.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.ffn.layers.0.0.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.ffn.layers.1.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.ffn.layers.1.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.downsample.reduction.weight - torch.Size([768, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.downsample.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.downsample.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.attn.w_msa.logit_scale - torch.Size([24, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.attn.w_msa.q_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.attn.w_msa.v_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.attn.w_msa.cpb_mlp.2.weight - torch.Size([24, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.attn.w_msa.qkv.weight - torch.Size([2304, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.attn.w_msa.proj.weight - torch.Size([768, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.attn.w_msa.proj.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.ffn.layers.0.0.bias - torch.Size([3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.ffn.layers.1.weight - torch.Size([768, 3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.ffn.layers.1.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.attn.w_msa.logit_scale - torch.Size([24, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.attn.w_msa.q_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.attn.w_msa.v_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.attn.w_msa.cpb_mlp.0.weight - torch.Size([512, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.attn.w_msa.cpb_mlp.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.attn.w_msa.cpb_mlp.2.weight - torch.Size([24, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.attn.w_msa.qkv.weight - torch.Size([2304, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.attn.w_msa.proj.weight - torch.Size([768, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.attn.w_msa.proj.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.ffn.layers.0.0.bias - torch.Size([3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.ffn.layers.1.weight - torch.Size([768, 3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.ffn.layers.1.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.norm3.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.norm3.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([7, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

head.fc.bias - torch.Size([7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 
2023/05/09 11:49:25 - mmengine - INFO - Delete `relative_position_index` and `relative_coords_table` since we always re-init these params according to the `window_size`, which might cause unwanted but unworried warnings when loading checkpoint.
2023/05/09 11:49:25 - mmengine - INFO - Load checkpoint from checkpoint\swinv2-tiny-w8_3rdparty_in1k-256px_20220803-e318968f.pth
2023/05/09 11:49:25 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/05/09 11:49:25 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/05/09 11:49:25 - mmengine - INFO - Checkpoints will be saved to C:\Users\Admin\mmpretrain\work_dirs\swinv2_tiny_ISICdataset\train.
2023/05/09 11:50:07 - mmengine - INFO - Epoch(train) [1][ 100/1002]  lr: 2.0745e-05  eta: 0:34:08  time: 0.2726  data_time: 0.0011  memory: 2107  loss: 1.2448
2023/05/09 11:50:34 - mmengine - INFO - Epoch(train) [1][ 200/1002]  lr: 4.0689e-05  eta: 0:27:42  time: 0.2746  data_time: 0.0012  memory: 2107  loss: 1.1443
2023/05/09 11:51:01 - mmengine - INFO - Epoch(train) [1][ 300/1002]  lr: 6.0633e-05  eta: 0:25:17  time: 0.2757  data_time: 0.0011  memory: 2107  loss: 1.3296
2023/05/09 11:51:29 - mmengine - INFO - Epoch(train) [1][ 400/1002]  lr: 8.0577e-05  eta: 0:23:52  time: 0.2768  data_time: 0.0011  memory: 2107  loss: 1.3085
2023/05/09 11:51:57 - mmengine - INFO - Epoch(train) [1][ 500/1002]  lr: 1.0052e-04  eta: 0:22:51  time: 0.2771  data_time: 0.0012  memory: 2107  loss: 1.0911
2023/05/09 11:52:25 - mmengine - INFO - Epoch(train) [1][ 600/1002]  lr: 1.2047e-04  eta: 0:22:01  time: 0.2777  data_time: 0.0013  memory: 2107  loss: 1.1773
2023/05/09 11:52:52 - mmengine - INFO - Epoch(train) [1][ 700/1002]  lr: 1.4041e-04  eta: 0:21:17  time: 0.2782  data_time: 0.0012  memory: 2107  loss: 1.1962
2023/05/09 11:53:20 - mmengine - INFO - Epoch(train) [1][ 800/1002]  lr: 1.6035e-04  eta: 0:20:38  time: 0.2779  data_time: 0.0011  memory: 2107  loss: 1.1323
2023/05/09 11:53:48 - mmengine - INFO - Epoch(train) [1][ 900/1002]  lr: 1.8030e-04  eta: 0:20:01  time: 0.2782  data_time: 0.0012  memory: 2107  loss: 1.2053
2023/05/09 11:54:16 - mmengine - INFO - Exp name: swinv2_tiny_ISICdataset_20230509_114918
2023/05/09 11:54:16 - mmengine - INFO - Epoch(train) [1][1000/1002]  lr: 2.0024e-04  eta: 0:19:26  time: 0.2781  data_time: 0.0011  memory: 2107  loss: 1.3486
2023/05/09 11:54:16 - mmengine - INFO - Exp name: swinv2_tiny_ISICdataset_20230509_114918
2023/05/09 11:54:16 - mmengine - INFO - Saving checkpoint at 1 epochs
2023/05/09 11:54:31 - mmengine - INFO - Epoch(val) [1][20/20]    accuracy/top1: 64.7668  data_time: 0.5460  time: 0.6420
2023/05/09 11:54:58 - mmengine - INFO - Epoch(train) [2][ 100/1002]  lr: 2.2058e-04  eta: 0:18:52  time: 0.2774  data_time: 0.0011  memory: 2107  loss: 1.2143
2023/05/09 11:55:26 - mmengine - INFO - Epoch(train) [2][ 200/1002]  lr: 2.4053e-04  eta: 0:18:19  time: 0.2780  data_time: 0.0011  memory: 2107  loss: 1.2124
2023/05/09 11:55:54 - mmengine - INFO - Epoch(train) [2][ 300/1002]  lr: 2.6047e-04  eta: 0:17:47  time: 0.2779  data_time: 0.0011  memory: 2107  loss: 1.2420
2023/05/09 11:56:22 - mmengine - INFO - Epoch(train) [2][ 400/1002]  lr: 2.8042e-04  eta: 0:17:16  time: 0.2785  data_time: 0.0014  memory: 2107  loss: 1.2015
2023/05/09 11:56:50 - mmengine - INFO - Epoch(train) [2][ 500/1002]  lr: 3.0036e-04  eta: 0:16:45  time: 0.2786  data_time: 0.0013  memory: 2107  loss: 1.1194
2023/05/09 11:57:18 - mmengine - INFO - Epoch(train) [2][ 600/1002]  lr: 3.2031e-04  eta: 0:16:15  time: 0.2791  data_time: 0.0012  memory: 2107  loss: 1.2467
2023/05/09 11:57:46 - mmengine - INFO - Epoch(train) [2][ 700/1002]  lr: 3.4025e-04  eta: 0:15:45  time: 0.2794  data_time: 0.0012  memory: 2107  loss: 1.2694
2023/05/09 11:58:14 - mmengine - INFO - Epoch(train) [2][ 800/1002]  lr: 3.6019e-04  eta: 0:15:16  time: 0.2819  data_time: 0.0011  memory: 2107  loss: 1.1857
2023/05/09 11:58:42 - mmengine - INFO - Epoch(train) [2][ 900/1002]  lr: 3.8014e-04  eta: 0:14:46  time: 0.2809  data_time: 0.0012  memory: 2107  loss: 1.1364
2023/05/09 11:59:09 - mmengine - INFO - Exp name: swinv2_tiny_ISICdataset_20230509_114918
2023/05/09 11:59:10 - mmengine - INFO - Epoch(train) [2][1000/1002]  lr: 4.0008e-04  eta: 0:14:17  time: 0.2811  data_time: 0.0012  memory: 2107  loss: 1.2703
2023/05/09 11:59:10 - mmengine - INFO - Exp name: swinv2_tiny_ISICdataset_20230509_114918
2023/05/09 11:59:10 - mmengine - INFO - Saving checkpoint at 2 epochs
2023/05/09 11:59:14 - mmengine - INFO - Epoch(val) [2][20/20]    accuracy/top1: 63.7306  data_time: 0.0055  time: 0.0823
2023/05/09 11:59:42 - mmengine - INFO - Epoch(train) [3][ 100/1002]  lr: 3.6039e-04  eta: 0:13:47  time: 0.2818  data_time: 0.0011  memory: 2107  loss: 1.1894
2023/05/09 12:00:10 - mmengine - INFO - Epoch(train) [3][ 200/1002]  lr: 3.7749e-04  eta: 0:13:18  time: 0.2820  data_time: 0.0012  memory: 2107  loss: 1.0242
2023/05/09 12:00:38 - mmengine - INFO - Epoch(train) [3][ 300/1002]  lr: 3.9458e-04  eta: 0:12:49  time: 0.2818  data_time: 0.0012  memory: 2107  loss: 1.2988
2023/05/09 12:01:06 - mmengine - INFO - Epoch(train) [3][ 400/1002]  lr: 4.1168e-04  eta: 0:12:21  time: 0.2810  data_time: 0.0012  memory: 2107  loss: 1.2335
2023/05/09 12:01:34 - mmengine - INFO - Epoch(train) [3][ 500/1002]  lr: 4.2878e-04  eta: 0:11:52  time: 0.2819  data_time: 0.0013  memory: 2107  loss: 1.2457
2023/05/09 12:02:03 - mmengine - INFO - Epoch(train) [3][ 600/1002]  lr: 4.4587e-04  eta: 0:11:23  time: 0.2818  data_time: 0.0012  memory: 2107  loss: 1.3050
2023/05/09 12:02:31 - mmengine - INFO - Epoch(train) [3][ 700/1002]  lr: 4.6297e-04  eta: 0:10:55  time: 0.2823  data_time: 0.0012  memory: 2107  loss: 1.3079
2023/05/09 12:02:59 - mmengine - INFO - Epoch(train) [3][ 800/1002]  lr: 4.8007e-04  eta: 0:10:26  time: 0.2814  data_time: 0.0012  memory: 2107  loss: 1.1721
2023/05/09 12:03:27 - mmengine - INFO - Epoch(train) [3][ 900/1002]  lr: 4.9716e-04  eta: 0:09:58  time: 0.2819  data_time: 0.0012  memory: 2107  loss: 1.0994
2023/05/09 12:03:54 - mmengine - INFO - Exp name: swinv2_tiny_ISICdataset_20230509_114918
2023/05/09 12:03:55 - mmengine - INFO - Epoch(train) [3][1000/1002]  lr: 5.1426e-04  eta: 0:09:29  time: 0.2805  data_time: 0.0011  memory: 2107  loss: 1.2039
2023/05/09 12:03:56 - mmengine - INFO - Exp name: swinv2_tiny_ISICdataset_20230509_114918
2023/05/09 12:03:56 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/05/09 12:03:59 - mmengine - INFO - Epoch(val) [3][20/20]    accuracy/top1: 66.3212  data_time: 0.0055  time: 0.0822
2023/05/09 12:04:27 - mmengine - INFO - Epoch(train) [4][ 100/1002]  lr: 3.1574e-04  eta: 0:09:00  time: 0.2819  data_time: 0.0013  memory: 2107  loss: 1.1576
2023/05/09 12:04:55 - mmengine - INFO - Epoch(train) [4][ 200/1002]  lr: 3.2589e-04  eta: 0:08:31  time: 0.2809  data_time: 0.0012  memory: 2107  loss: 1.2695
2023/05/09 12:05:24 - mmengine - INFO - Epoch(train) [4][ 300/1002]  lr: 3.3604e-04  eta: 0:08:03  time: 0.2819  data_time: 0.0012  memory: 2107  loss: 1.1057
2023/05/09 12:05:52 - mmengine - INFO - Epoch(train) [4][ 400/1002]  lr: 3.4620e-04  eta: 0:07:34  time: 0.2821  data_time: 0.0013  memory: 2107  loss: 1.0444
2023/05/09 12:06:20 - mmengine - INFO - Epoch(train) [4][ 500/1002]  lr: 3.5635e-04  eta: 0:07:06  time: 0.2819  data_time: 0.0012  memory: 2107  loss: 1.1325
2023/05/09 12:06:48 - mmengine - INFO - Epoch(train) [4][ 600/1002]  lr: 3.6650e-04  eta: 0:06:38  time: 0.2816  data_time: 0.0012  memory: 2107  loss: 1.1982
2023/05/09 12:07:17 - mmengine - INFO - Epoch(train) [4][ 700/1002]  lr: 3.7665e-04  eta: 0:06:09  time: 0.2823  data_time: 0.0012  memory: 2107  loss: 1.0046
2023/05/09 12:07:45 - mmengine - INFO - Epoch(train) [4][ 800/1002]  lr: 3.8680e-04  eta: 0:05:41  time: 0.2810  data_time: 0.0014  memory: 2107  loss: 1.2949
2023/05/09 12:08:13 - mmengine - INFO - Epoch(train) [4][ 900/1002]  lr: 3.9696e-04  eta: 0:05:12  time: 0.2820  data_time: 0.0012  memory: 2107  loss: 1.1524
2023/05/09 12:08:40 - mmengine - INFO - Exp name: swinv2_tiny_ISICdataset_20230509_114918
2023/05/09 12:08:41 - mmengine - INFO - Epoch(train) [4][1000/1002]  lr: 4.0711e-04  eta: 0:04:44  time: 0.2819  data_time: 0.0011  memory: 2107  loss: 1.2024
2023/05/09 12:08:42 - mmengine - INFO - Exp name: swinv2_tiny_ISICdataset_20230509_114918
2023/05/09 12:08:42 - mmengine - INFO - Saving checkpoint at 4 epochs
2023/05/09 12:08:45 - mmengine - INFO - Epoch(val) [4][20/20]    accuracy/top1: 64.7668  data_time: 0.0057  time: 0.0826
2023/05/09 12:09:13 - mmengine - INFO - Epoch(train) [5][ 100/1002]  lr: 1.2952e-04  eta: 0:04:15  time: 0.2821  data_time: 0.0011  memory: 2107  loss: 1.0875
2023/05/09 12:09:41 - mmengine - INFO - Epoch(train) [5][ 200/1002]  lr: 1.3267e-04  eta: 0:03:47  time: 0.2825  data_time: 0.0011  memory: 2107  loss: 1.1377
2023/05/09 12:10:10 - mmengine - INFO - Epoch(train) [5][ 300/1002]  lr: 1.3582e-04  eta: 0:03:18  time: 0.2821  data_time: 0.0012  memory: 2107  loss: 1.0309
2023/05/09 12:10:38 - mmengine - INFO - Epoch(train) [5][ 400/1002]  lr: 1.3897e-04  eta: 0:02:50  time: 0.2813  data_time: 0.0012  memory: 2107  loss: 1.2502
2023/05/09 12:11:06 - mmengine - INFO - Epoch(train) [5][ 500/1002]  lr: 1.4212e-04  eta: 0:02:22  time: 0.2821  data_time: 0.0013  memory: 2107  loss: 1.2247
2023/05/09 12:11:34 - mmengine - INFO - Epoch(train) [5][ 600/1002]  lr: 1.4527e-04  eta: 0:01:53  time: 0.2818  data_time: 0.0013  memory: 2107  loss: 1.1764
2023/05/09 12:12:03 - mmengine - INFO - Epoch(train) [5][ 700/1002]  lr: 1.4842e-04  eta: 0:01:25  time: 0.2825  data_time: 0.0013  memory: 2107  loss: 1.1390
2023/05/09 12:12:31 - mmengine - INFO - Epoch(train) [5][ 800/1002]  lr: 1.5157e-04  eta: 0:00:57  time: 0.2824  data_time: 0.0011  memory: 2107  loss: 1.0780
2023/05/09 12:12:59 - mmengine - INFO - Epoch(train) [5][ 900/1002]  lr: 1.5472e-04  eta: 0:00:28  time: 0.2835  data_time: 0.0013  memory: 2107  loss: 1.1110
2023/05/09 12:13:25 - mmengine - INFO - Exp name: swinv2_tiny_ISICdataset_20230509_114918
2023/05/09 12:13:27 - mmengine - INFO - Epoch(train) [5][1000/1002]  lr: 1.5787e-04  eta: 0:00:00  time: 0.2849  data_time: 0.0011  memory: 2107  loss: 1.2275
2023/05/09 12:13:28 - mmengine - INFO - Exp name: swinv2_tiny_ISICdataset_20230509_114918
2023/05/09 12:13:28 - mmengine - INFO - Saving checkpoint at 5 epochs
2023/05/09 12:13:31 - mmengine - INFO - Epoch(val) [5][20/20]    accuracy/top1: 71.5026  data_time: 0.0048  time: 0.0815
